name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check code formatting
      run: npm run format:check

    - name: Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_jwt_secret_minimum_32_characters
        JWT_REFRESH_SECRET: test_refresh_secret_minimum_32_chars
        LOG_LEVEL: error
      run: npm test
      continue-on-error: false

    - name: Run security audit
      run: npm audit --audit-level high
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Build Docker image
      run: docker build -t strong-prod-backend:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3001:3000 \
          -e NODE_ENV=production \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -e JWT_SECRET=test_jwt_secret_minimum_32_characters \
          -e JWT_REFRESH_SECRET=test_refresh_secret_minimum_32_chars \
          strong-prod-backend:${{ github.sha }}
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        docker stop test-container
        docker rm test-container

    - name: Clean up
      run: docker image prune -f